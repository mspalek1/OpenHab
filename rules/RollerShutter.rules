
rule "RollerShutter astro:sun:home_rollerShutter_DOWN"
when
        Channel 'astro:sun:home_rollerShutter_1:set#event' triggered START
then

        // Ustalanie daty początkowej (1.04 bieżącego roku)
        val year = now.getYear();
        val month = 4;
        val day = 1;
        val startDate = now.withYear(year).withMonth(month).withDayOfMonth(day)
        
        month = 10;
        day = 1;
        val endDate = now.withYear(year).withMonth(month).withDayOfMonth(day)
       // logInfo("Info", "Year " + " " + startDate.toString() + " " + endDate.toString());

        // Tworzenie zmiennej boolean i sprawdzanie, czy aktualna data mieści się w przedziale
        val boolean isHotDay = now.isAfter(startDate) && now.isBefore(endDate)
        //logInfo("Info", "isHotDay " + isHotDay.toString());
        logInfo("Info", "RollerShutter DOWN");
        
        FirstBedRoom.sendCommand(DOWN);
        Thread::sleep(500)
        SecondBedRoom.sendCommand(DOWN);

        if(isHotDay)
        {
                logInfo("Info", "isHotDay RollerShutter STOP");
                Thread::sleep(13000);
                FirstBedRoom.sendCommand(STOP);
                Thread::sleep(500)
                SecondBedRoom.sendCommand(STOP);
        }
end

rule "RollerShutter astro:sun:home_rollerShutter_UP"
when
        Channel 'astro:sun:home_rollerShutter_1:rise#event' triggered START
        or
        Time cron "0 0 8 ? * * *"
        //https://www.freeformatter.com/cron-expression-generator-quartz.html
        // Time cron "ss mm hh DD MM WW YYYY"
        // where YYYY is OPTIONAL. All other fields are mandatory.
        // ss -> Seconds
        // mm -> Minutes
        // hh -> Hours
        // DD -> Day of Month
        // MM -> Month (i.e. 1 to 12 or JAN to DEC)
        // WW -> Day of Week (i.e. 1 to 7 or SUN to SAT)
then
        val isWeekend = Ephemeris.isWeekend();
        val ifLatestOpen = false;
        val isBankHoliday = Ephemeris.isBankHoliday();
        val isMyHoliday = Ephemeris.isBankHoliday(now.plusDays(0),'/etc/openhab/services/holidays.xml');
        
        // val now = new DateTime();
        // // Ustalanie daty początkowej (27.06 bieżącego roku)
        // val start = new DateTime(now.getYear(), 6, 27, 0, 0)
        // // Ustalanie daty końcowej (31.08 bieżącego roku)
        // val end = new DateTime(now.getYear(), 8, 31, 23, 59, 59)
        //  // Tworzenie zmiennej boolean i sprawdzanie, czy aktualna data mieści się w przedziale
        // val boolean isHoliday = now.isAfter(start) && now.isBefore(end)


        // Ustalanie daty początkowej (27.06 bieżącego roku)
        val year = now.getYear();
        val month = 6;
        val day = 27;
        val startDate = now.withYear(year).withMonth(month).withDayOfMonth(day)
        
        month = 8;
        day = 31;
        val endDate = now.withYear(year).withMonth(month).withDayOfMonth(day)
        //logInfo("Info", "Year " + " " + startDate.toString() + " " + endDate.toString());
        // Tworzenie zmiennej boolean i sprawdzanie, czy aktualna data mieści się w przedziale
        val boolean isHoliday = now.isAfter(startDate) && now.isBefore(endDate)
        //logInfo("Info", "isHoliday " + isHoliday.toString());

        //logInfo("org.openhab.rollershutter", "test czy działa")
        //logInfo("Info", "isWeekend: " +isWeekend.toString())
       //logInfo("Info", "isBankHoliday: " +isBankHoliday.toString() + ", isMyHoliday: " + isMyHoliday);

       Thread::sleep(500)

        var Number hour = now.getHour
        if(hour >= 8)
        {    
                //logInfo("Info", hour.toString());
                ifLatestOpen = true;
        }

        if(!isWeekend && !ifLatestOpen && !isBankHoliday)
        {
                logInfo("Info", "RollerShutter UP - workday");
                if(!isHoliday)
                {
                        FirstBedRoom.sendCommand(UP);
                        Thread::sleep(500)
                }
               
                SecondBedRoom.sendCommand(UP);
        }
        else if(ifLatestOpen && (isBankHoliday || isWeekend || isMyHoliday || isHoliday))
        {
               logInfo("Info", "RollerShutter UP - isWeekend: " + isWeekend.toString() + ", isBankHoliday: " + isBankHoliday.toString() + ", isMyHoliday: " + isMyHoliday.toString() + ", isHoliday: " + isHoliday.toString());
                // if(isBankHoliday || isMyHoliday)
                // {
                //         logInfo("Info", "isBankHoliday: " +isBankHoliday.toString() + ", isMyHoliday: " + isMyHoliday);
                // }
                // if(isHoliday)
                // {
                //         logInfo("Info", "isHoliday: " +isHoliday.toString());
                // }
                FirstBedRoom.sendCommand(UP);
                Thread::sleep(500)
                SecondBedRoom.sendCommand(UP);
        }
        else
        {
                logInfo("Info", "RollerShutters are already open");
        }
end